package com.fileReader.fileReadService;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
@Service
public class FileReadService {
	
	
	public List<String> readExcelData(MultipartFile eFile) throws IOException {
    List<String> emailDataList = new ArrayList<>();

    try (Workbook workbook = WorkbookFactory.create(eFile.getInputStream())) {
        Sheet sheet = workbook.getSheetAt(0); // Assuming data is in the first sheet

        // Iterate over each row
        for (int i = 0; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row != null) {
                StringBuilder rowData = new StringBuilder();
                
                // Iterate over each cell in the row
                for (int j = 0; j < row.getLastCellNum(); j++) {
                    Cell cell = row.getCell(j);
                    if (cell != null) {
                        // Append cell value to rowData
                        rowData.append(cell.toString()).append("  ");
                    }
                }
                // Add rowData to emailDataList
                emailDataList.add(rowData.toString());
            }
        }
    }
    return emailDataList;
}

  
	// this method will only work for csv file and text file only not for excel files 
/*	public List<String> readExcelData(MultipartFile csvFile) throws IOException {
		List<String> csvDataList = new ArrayList<>();

		try (BufferedReader br = new BufferedReader(new InputStreamReader(csvFile.getInputStream()))) {
			String line;
			while ((line = br.readLine()) != null) {



				csvDataList.add(line);
			}
		}
		return csvDataList;
	}*/
	
	
	public String pdfReader(MultipartFile file)
	{
		
		String text=null;
		 // File files = new File("sample.pdf");

	        try {
	            // Load PDF document
	            PDDocument document = PDDocument.load(file.getInputStream());

	            // Create PDFTextStripper object
	            PDFTextStripper stripper = new PDFTextStripper();

	            // Get text from the PDF document
	             text = stripper.getText(document);
       List<List<String>> tables = extractTables(text);
       
     for (List<String> list : tables) {
    	 
    	 
    	 System.out.println("Table list :"+list);
		
	}
	         
	            // Print the extracted text
	            System.out.println(text);

	            // Close the document
	            document.close();

	        } catch (IOException e) {
	            e.printStackTrace();
	        }
			return text;
		
		
	}
	
	 public static List<List<String>> extractTables(String text) {
	        // Implement your logic to identify and parse tables from the extracted text
	        // This is a simplified example and may need further customization based on your specific PDF structure
	        // You might use regular expressions or other parsing techniques to identify table boundaries, rows, and cells
	        // For simplicity, this example splits the text by lines assuming each line represents a row
	        List<List<String>> tables = new ArrayList<>();
	        List<String> currentTable = new ArrayList<>();
	        for (String line : text.split("\n")) {
	            // Example condition: Consider lines with more than 3 tab characters as part of a new table
	            if (line.split("\t").length > 3) {
	                if (!currentTable.isEmpty()) {
	                    tables.add(new ArrayList<>(currentTable));
	                    currentTable.clear();
	                }
	            }
	            currentTable.add(line);
	        }
	        if (!currentTable.isEmpty()) {
	            tables.add(currentTable);
	        }
	        return tables;
	    }
	
	

}
