package com.springBatch.Config;


import java.lang.System.Logger;

import javax.sql.DataSource;

import org.slf4j.LoggerFactory;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.repository.JobRepository;

import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider;
import org.springframework.batch.item.database.JdbcBatchItemWriter;
import org.springframework.batch.item.database.builder.JdbcBatchItemWriterBuilder;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.LineMapper;
import org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.FileSystemResource;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;

import com.springBatch.entity.Department;



@Configuration
@EnableBatchProcessing
//@Slf4j
public class SpringBatchConfig {
	        
	
           private final static org.slf4j.Logger log= LoggerFactory.getLogger(SpringBatchConfig.class);

	      // @Autowired
          // private SpringBatchRepo batchRepo;
	
     // item reader
    @Bean
    public FlatFileItemReader<Department> itemReader() {

        FlatFileItemReader<Department> flatFileItemReader = new FlatFileItemReader<>();
        flatFileItemReader.setResource(new FileSystemResource("src/main/resources/users.csv"));
        flatFileItemReader.setName("CSV-Reader");
        flatFileItemReader.setLinesToSkip(1);
        flatFileItemReader.setLineMapper(lineMapper());
       // log.info("item reaser............");
        return flatFileItemReader;
    }

    @Bean
    public LineMapper<Department> lineMapper() {

        DefaultLineMapper<Department> defaultLineMapper = new DefaultLineMapper<>();
        DelimitedLineTokenizer lineTokenizer = new DelimitedLineTokenizer();

        lineTokenizer.setDelimiter(",");
        lineTokenizer.setStrict(false);
        lineTokenizer.setNames("id", "name", "dept", "salary");

        BeanWrapperFieldSetMapper<Department> fieldSetMapper = new BeanWrapperFieldSetMapper<>();
        fieldSetMapper.setTargetType(Department.class);

        defaultLineMapper.setLineTokenizer(lineTokenizer);
        defaultLineMapper.setFieldSetMapper(fieldSetMapper);
      //  log.info("line mapper............");
        return defaultLineMapper;
    }

    
    // item processor
    @Bean
    public CompleteProcessor completeProcessor()
    {
    	//log.info("item processor......");
    	return new CompleteProcessor();
    }
    // item writer
   
  /*  @Bean
	public ItemWriter<Department> itemWriter(DataSource dataSource) {
		return new JdbcBatchItemWriterBuilder<Department>().sql(
				"insert into Department( id, name, dept, salary, ) values (:id, :name, :dept, :salary,)")
				.dataSource(dataSource)
				.beanMapped()
				.build();
	}
    */
    
    
    
    @Bean
    public ItemWriter<Department> itemWriter(DataSource dataSource) {
        JdbcBatchItemWriter<Department> itemWriter = new JdbcBatchItemWriter<>();
        itemWriter.setDataSource(dataSource);
        itemWriter.setSql("INSERT INTO Department (id, name, dept, salary) VALUES (:id, :name, :dept, :salary)");
        itemWriter.setItemSqlParameterSourceProvider(new BeanPropertyItemSqlParameterSourceProvider<>());
        itemWriter.afterPropertiesSet(); // Ensure all properties are properly set
        
        // Add logging
        itemWriter.afterPropertiesSet();
        log.info("Item writer initialized");
        System.out.println("item writer method :"+itemWriter);
        return itemWriter;
    }

    
    
    
    
	/*
	 * public RepositoryItemWriter<Department>itemWriter() {
	 * 
	 * RepositoryItemWriter<Department>writer=new RepositoryItemWriter<>();
	 * 
	 * writer.setRepository(batchRepo); writer.setMethodName("save"); //
	 * log.info("Item write..........."); return writer;
	 * 
	 * }
	 */    
    
   
	
    
    
    
    @Bean
    public DataSourceTransactionManager transactionManager(DataSource dataSource) {
        return new DataSourceTransactionManager(dataSource);
    }

 
    
	// step 
    @Bean
    public Step steps(JobRepository jobRepository,DataSourceTransactionManager transactionManager,ItemWriter<Department> itemwriter)
    {
    //	log.info("steps..............");
    	return new StepBuilder("jobstep", jobRepository)
    			.<Department,Department>chunk(3, transactionManager)
    			.writer(itemwriter)
    			.processor(completeProcessor())
    			.reader(itemReader())
    			.build();
    }
    
    //job 
    
    @Bean
	Job jobBean(JobRepository jobRepository, JobComplitionNotificationImpl listener, Step steps) {
	    //    log.info("job..........");
    	return new JobBuilder("job", jobRepository)
				.listener(listener)
				.start(steps)
				.build();
	}
        
}
