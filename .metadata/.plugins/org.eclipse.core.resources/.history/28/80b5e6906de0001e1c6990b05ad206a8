package com.fileReader.fileReadService;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

@Service
public class FileReadService {

	public List<String> readExcelData(MultipartFile eFile) throws IOException {
		List<String> emailDataList = new ArrayList<>();

		try (Workbook workbook = WorkbookFactory.create(eFile.getInputStream())) {
			Sheet sheet = workbook.getSheetAt(0); // Assuming data is in the first sheet

			// Iterate over each row
			for (int i = 0; i <= sheet.getLastRowNum(); i++) {
				Row row = sheet.getRow(i);
				if (row != null) {
					StringBuilder rowData = new StringBuilder();

					// Iterate over each cell in the row
					for (int j = 0; j < row.getLastCellNum(); j++) {
						Cell cell = row.getCell(j);
						if (cell != null) {
							// Append cell value to rowData
							rowData.append(cell.toString()).append("  ");
						}
					}
					// Add rowData to emailDataList
					emailDataList.add(rowData.toString());
				}
			}
		}
		return emailDataList;
	}

	// this method will only work for csv file and text file only not for excel
	// files
	/*
	 * public List<String> readExcelData(MultipartFile csvFile) throws IOException {
	 * List<String> csvDataList = new ArrayList<>();
	 * 
	 * try (BufferedReader br = new BufferedReader(new
	 * InputStreamReader(csvFile.getInputStream()))) { String line; while ((line =
	 * br.readLine()) != null) {
	 * 
	 * 
	 * 
	 * csvDataList.add(line); } } return csvDataList; }
	 */

	public List<String> pdfReader(MultipartFile file) {
		List<String> addList = new ArrayList<>();

		String text = null;
		// File files = new File("sample.pdf");

		try {
			// Load PDF document
			PDDocument document = PDDocument.load(file.getInputStream());

			// Create PDFTextStripper object
			PDFTextStripper stripper = new PDFTextStripper();

			// Get text from the PDF document
			text = stripper.getText(document);
			List<List<String>> tables = extractTables(text);

			for (List<String> list : tables) {

				addList.addAll(list);
				// System.out.println("Table list :"+list);

			}

			// Print the extracted text
			// System.out.println(text);

			// Close the document
			document.close();

		} catch (IOException e) {
			e.printStackTrace();
		}
		return addList;

	}

	public static List<List<String>> extractTables(String text) {
	    List<List<String>> tables = new ArrayList<>();
	    List<String> currentTable = new ArrayList<>();
	    
	    for (String line : text.split("\n")) {
	        String[] segments = line.split("\t");
	        
	        // Check if the line contains only tab-separated segments
	        if (segments.length > 0 && !line.trim().isEmpty()) {
	            currentTable.add(line);
	        } else {
	            if (!currentTable.isEmpty()) {
	                tables.add(new ArrayList<>(currentTable));
	                currentTable.clear();
	            }
	        }
	    }
	    
	    if (!currentTable.isEmpty()) {
	        tables.add(currentTable);
	    }
	    System.out.println(tables);
	    return tables;
	}



  /*  public void extractTables(MultipartFile filePath) throws IOException {
        // Load a sample PDF document
        PdfDocument pdf = new PdfDocument(filePath.getInputStream());

        // Create a StringBuilder instance
        StringBuilder builder = new StringBuilder();

        // Create a PdfTableExtractor instance
        PdfTableExtractor extractor = new PdfTableExtractor(pdf);

        // Loop through the pages in the PDF
        for (int pageIndex = 0; pageIndex < pdf.getPages().getCount(); pageIndex++) {
            // Extract tables from the current page into a PdfTable array
            PdfTable[] tableLists = extractor.extractTable(pageIndex);

            // If any tables are found
            if (tableLists != null && tableLists.length > 0) {
                // Loop through the tables in the array
                for (PdfTable table : tableLists) {
                    // Loop through the rows in the current table
                    for (int i = 0; i < table.getRowCount(); i++) {
                        // Loop through the columns in the current table
                        for (int j = 0; j < table.getColumnCount(); j++) {
                            // Extract data from the current table cell and append to the StringBuilder
                            String text = table.getText(i, j);
                            builder.append(text).append(" | ");
                        }
                        builder.append("\r\n");
                    }
                }
            }
        }

        // Write data into a .txt document
        FileWriter fw = new FileWriter("ExtractTable.txt");
        fw.write(builder.toString());
        fw.flush();
        fw.close();
    }*/
}
